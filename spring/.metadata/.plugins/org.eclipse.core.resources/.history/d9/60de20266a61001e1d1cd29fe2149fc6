package pack.controller;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import pack.model.CartItem;
import pack.model.Order;
import pack.model.OrderItem;
import pack.model.Product;
import pack.repository.CartItemRepository;
import pack.service.CartItemService;
import pack.service.CartService;
import pack.service.OrderItemService;
import pack.service.OrderService;
import pack.service.ProductService;

@Controller
public class CartController {

	@Autowired
    private CartItemRepository cartItemRepository;

    @Autowired
    private CartItemService cartItemService;

    @Autowired
    private OrderItemService orderItemService;

    @Autowired
    private OrderService orderService;

    @Autowired
    private ProductService productService;
    
    @Autowired
    private CartService cartService;

    // 장바구니에 상품 추가하는 요청 처리
    @PostMapping("/addToCartItem")
    public String addToCart(@RequestParam("productId") int productId, @RequestParam("quantity") int quantity) {
        cartService.addToCart(productId, quantity);
        return "redirect:/cart";
    }

    // 장바구니 화면 표시
    @GetMapping("/cart")
    public String viewCart(Model model) {
        List<CartItem> cartItems = cartService.getCartItemsCartByCartItemIdDesc();
        model.addAttribute("cartItems", cartItems);
        return "cart";
    }
    
    // 선택상품 삭제
    @PostMapping("/removeCartItem")
    public String removeCartItem(@RequestParam int cartItemId) {
    	
        CartItem cartItem = cartItemService.getCartItemById(cartItemId);
        if (cartItem != null) {
            cartItemService.removeCartItem(cartItemId);
        }

        return "redirect:/cart";
    }

    // 장바구니에서 order로 정보넣기
    @PostMapping("/orderfromcart")
    public String orderFromCart(@RequestParam int cartItemId) {
        // 1. CartItem에서 필요한 정보를 가져오기
        CartItem cartItem = cartItemService.getCartItemById(cartItemId);
        Product product = cartItem.getProduct();

        // 2. 장바구니에서 상품 제거
        cartItemService.removeCartItem(cartItemId);

        // 3. 주문 객체 생성
        Order order = new Order();
        order.setOrderStatus("결제완료");

        // 현재 시간을 주문 시간으로 설정합니다.
        order.setOrderDate(new Date());
        order = orderService.createOrder(order);

        // 4. 주문 항목 생성
        OrderItem orderItem = new OrderItem();
        orderItem.setProduct(product);
        orderItem.setOrder(order);
        orderItem.setOrderCount(cartItem.getCartCount());
        orderItem.setSubtotal(product.getPrice() * cartItem.getCartCount());
        orderItemService.createOrderItem(orderItem);

        productService.updateStockQuantity(product.getProductId(), cartItem.getCartCount());
        // 5. 홈페이지로 리다이렉트합니다.
        return "redirect:/order";
    }


    @PostMapping("/createOrder")
    public String createOrder(@RequestParam int cartItemId, RedirectAttributes redirectAttributes) {

        CartItem cartItem = cartItemRepository.findById(cartItemId).orElse(null);

        if (cartItem != null) {
            redirectAttributes.addAttribute("productName", cartItem.getProduct().getModel());
            redirectAttributes.addAttribute("productPrice", cartItem.getProduct().getPrice());
            redirectAttributes.addAttribute("productPrice", cartItem.getProduct().getPimage());
            redirectAttributes.addAttribute("productPrice", cartItem.getProduct().getBrand());
            redirectAttributes.addAttribute("productPrice", cartItem.getCartCount());
        }

        return "redirect:/cartform"; // 주문 확인 페이지로 이동
    }
    
    // 장바구니 화면 표시
    @GetMapping("/cartform")
    public String viewCartForm(Model model) {
        List<CartItem> cartItems = cartService.getCartItemsCartByCartItemIdDesc();
        model.addAttribute("cartItems", cartItems);
        return "cartform";
    }

}
