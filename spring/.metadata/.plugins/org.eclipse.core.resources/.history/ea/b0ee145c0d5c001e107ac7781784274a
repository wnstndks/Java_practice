package pack.member;

import java.time.LocalDateTime;

import org.springframework.data.annotation.CreatedDate;

import jakarta.persistence.Column;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class MemberDto {
	private int customerid;
	
	@NotBlank(message = "아이디를 입력하세요")
	@Pattern(regexp = "^[a-z0-9]{5,20}$", message = "아이디는 영어 소문자와 숫자만 사용하여 5~20자리여야 합니다.")
	private String customernickname;
	
	@NotBlank(message = "비밀번호를 입력하세요")
	@Pattern(regexp = "(?=.*[0-9])(?=.*[a-zA-Z])(?=.*\\W)(?=\\S+$).{5,16}", message = "비밀번호는 5~16자 영어 대소문자, 숫자, 특수문자를 사용하세요.")
    private String passwordhash;
	
	@NotBlank(message = "이름을 입력하세요")
	@Pattern(regexp = "^[가-힣]{2,10}$")
    private String customername;
	
    private String customergen;
    
    private String email;
    
    @Pattern(regexp = "^01(?:0|1|[6-9])(?:\\d{3}|\\d{4})\\d{4}$", message = "올바른 전화번호 형식이 아닙니다")
    @NotBlank(message = "휴대전화를 입력하세요")
    private String phonenumber;
    private String zipcode;
    private String address;
    private String detailaddress;
    
    private Boolean ISseller = false;
    
    public static MemberDto toMemberDTO(MemberEntity memberEntity) {
    	MemberDto memberDto = new MemberDto();
    	memberDto.setCustomerid(memberEntity.getCustomerid());
    	memberDto.setCustomernickname(memberEntity.getCustomernickname());
    	memberDto.setPasswordhash(memberEntity.getPasswordhash());
    	memberDto.setCustomername(memberEntity.getCustomername());
    	memberDto.setCustomergen(memberEntity.getCustomergen());
    	memberDto.setEmail(memberEntity.getEmail());
    	memberDto.setPhonenumber(memberEntity.getPhonenumber());
    	memberDto.setZipcode(memberEntity.getZipcode());
    	memberDto.setAddress(memberEntity.getAddress());
    	memberDto.setDetailaddress(memberEntity.getDetailaddress());
    	memberDto.setISseller(true);
    	return memberDto;
    }
}
