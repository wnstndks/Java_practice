package pack.cart;

import java.util.List;

import org.hibernate.cache.spi.support.AbstractReadWriteAccess.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import ch.qos.logback.core.model.Model;
import pack.member.Member;

@Controller
public class CartController {

	@Autowired
	CartService cartService;
    
	@Autowired
	CartProduct cartProduct;
    
	
	
	 // 장바구니 페이지 접속
    @GetMapping("/user/cart/{id}")
    public String userCartPage(@PathVariable("id") Integer id, Model model) {
        // 로그인이 되어있는 유저의 id와 장바구니에 접속하는 id가 같아야 함
        if (principalDetails.getUser().getId() == id) {

            Member customer = customerPageService.findUser(id);
            // 로그인 되어 있는 유저에 해당하는 장바구니 가져오기
            Cart userCart = customer.getCart();

            // 장바구니에 들어있는 아이템 모두 가져오기
            List<CartProduct> cartProductList = cartService.allUserCartView(userCart);

            // 장바구니에 들어있는 상품들의 총 가격
            int totalPrice = 0;
            for (CartProduct cartitem : cartProductList) {
                totalPrice += cartitem.getCartcount() * cartitem.getProduct().getPrice();
            }

            model.addAttribute("totalPrice", totalPrice);
            model.addAttribute("totalCount", userCart.getCount());
            model.addAttribute("cartItems", cartItemList);
            model.addAttribute("user", userPageService.findUser(id));

            return "/user/userCart";
        }
        // 로그인 id와 장바구니 접속 id가 같지 않는 경우
        else {
            return "redirect:/main";
        }
    }

    // 장바구니에 물건 넣기
    @PostMapping("/user/cart/{id}/{itemId}")
    public String addCartItem(@PathVariable("id") Integer id, @PathVariable("itemId") Integer itemId, int amount) {

        User user = userPageService.findUser(id);
        Item item = itemService.itemView(itemId);

        cartService.addCart(user, item, amount);

        return "redirect:/item/view/{itemId}";
    }

    
    // 장바구니에서 물건 삭제
    // 삭제하고 남은 상품의 총 개수
    @GetMapping("/user/cart/{id}/{cartItemId}/delete")
    public String deleteCartItem(@PathVariable("id") Integer id, @PathVariable("cartItemId") Integer itemId, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {
        // 로그인 유저 id와 장바구니 유저의 id가 같아야 함
        if (principalDetails.getUser().getId() == id) {
            // itemId로 장바구니 상품 찾기
            CartPrdouct cartItem = cartService.findCartItemById(itemId);

            // 해당 유저의 카트 찾기
            Cart userCart = cartService.findUserCart(id);

            // 장바구니 전체 수량 감소
            userCart.setCount(userCart.getCount()-cartItem.getCount());

            // 장바구니 물건 삭제
            cartService.cartItemDelete(itemId);

            // 해당 유저의 장바구니 상품들
            List<CartItem> cartItemList = cartService.allUserCartView(userCart);

            // 총 가격 += 수량 * 가격
            int totalPrice = 0;
            for (CartItem cartitem : cartItemList) {
                totalPrice += cartitem.getCount() * cartitem.getItem().getPrice();
            }

            // 총 개수 += 수량
            //int totalCount = 0;
            //for (CartItem cartitem : cartItemList) {
            //    totalCount += cartitem.getCount();
            //}


            model.addAttribute("totalPrice", totalPrice);
            model.addAttribute("totalCount", userCart.getCount());
            model.addAttribute("cartItems", cartItemList);
            model.addAttribute("user", userPageService.findUser(id));

            return "/user/userCart";
        }
        // 로그인 id와 장바구니 삭제하려는 유저의 id가 같지 않는 경우
        else {
            return "redirect:/main";
        }
    }

}
