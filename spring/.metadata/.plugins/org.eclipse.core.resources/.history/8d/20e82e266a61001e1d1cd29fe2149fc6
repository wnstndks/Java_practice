package pack.controller;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import pack.model.CartItem;
import pack.model.Order;
import pack.model.OrderItem;
import pack.model.Product;
import pack.repository.CartItemRepository;
import pack.service.CartItemService;
import pack.service.CartService;
import pack.service.OrderItemService;
import pack.service.OrderService;
import pack.service.ProductService;

@Controller
public class CartController {

	@Autowired
    private CartItemRepository cartItemRepository;

    @Autowired
    private CartItemService cartItemService;

    @Autowired
    private OrderItemService orderItemService;

    @Autowired
    private OrderService orderService;

    @Autowired
    private ProductService productService;
    
    @Autowired
    private CartService cartService;

    // 장바구니에 상품 추가하는 요청 처리
    @PostMapping("/addToCartItem")
    public String addToCart(@RequestParam("productId") int productId, @RequestParam("quantity") int quantity) {
        cartService.addToCart(productId, quantity);
        return "redirect:/cart";
    }

    // 장바구니 화면 표시
    @GetMapping("/cart")
    public String viewCart(Model model) {
        List<CartItem> cartItems = cartService.getCartItemsCartByCartItemIdDesc();
        model.addAttribute("cartItems", cartItems);
        return "cart";
    }
    
    // 선택상품 삭제
    @PostMapping("/removeCartItem")
    public String removeCartItem(@RequestParam int cartItemId) {
    	
        CartItem cartItem = cartItemService.getCartItemById(cartItemId);
        if (cartItem != null) {
            cartItemService.removeCartItem(cartItemId);
        }

        return "redirect:/cart";
    }

    @PostMapping("/createOrder")
    public String createOrder(@RequestParam int cartItemId, RedirectAttributes redirectAttributes) {

        CartItem cartItem = cartItemRepository.findById(cartItemId).orElse(null);

        if (cartItem != null) {
            redirectAttributes.addAttribute("productName", cartItem.getProduct().getModel());
            redirectAttributes.addAttribute("productPrice", cartItem.getProduct().getPrice());
            redirectAttributes.addAttribute("productPrice", cartItem.getProduct().getPimage());
            redirectAttributes.addAttribute("productPrice", cartItem.getProduct().getBrand());
            redirectAttributes.addAttribute("productPrice", cartItem.getCartCount());
        }

        return "redirect:/cartform"; // 주문 확인 페이지로 이동
    }
    
    // 장바구니 화면 표시
    @GetMapping("/cartform")
    public String viewCartForm(Model model) {
        List<CartItem> cartItems = cartService.getCartItemsCartByCartItemIdDesc();
        model.addAttribute("cartItems", cartItems);
        return "cartform";
    }

}
